webpackJsonp([1,5],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var zcom = __webpack_require__(1);
	zcom.QueryString.Initial();
	var myDialog = __webpack_require__(2);
	var authentication = __webpack_require__(4);
	var view = __webpack_require__(5);
	var num = __webpack_require__(3);
	var map = __webpack_require__(6);
	var getVerifyCodeDJS = 60; // 取验证码倒计时
	var openid = '';
	var merName, merId, prdt_no, latitude, longitude;
	var dlsq = 'wxn'; // wxn:
	$verifyBtn = $("#verifyBtn");
	$(function() {
	    zcom.checkBrowser();

	    inintUserNameEvent();
	    initUserIdEvent();
	    inintCreditCardEvent();
	    initCVN2Event();
	    initTimeNumEvent();
	    inintphoneEvent();
	    inintYZMEvent();
	    initYanjingIconEvent();
	    initVale();
	    $("#submitA").on("touchstart", applyLfqOrder);
	    $("#submitApply").on("touchend", applyLfqOrder2);
	    $("#submitCancel").on("touchstart", function() {
	        $("#orderTiShi").hide();
	    });
	    $("#orderTiShi .close_div").on("touchstart", function() {
	        $("#orderTiShi").hide();
	    });
	    $("#modalButton").parent().on("touchend", function() {
	        myDialog.hideModal();
	        event.preventDefault();
	    });
	    $("#verifyBtn").on("touchstart", getVerifyCode);

	    setInfo();
	    $("#fanhui").on("touchstart", function() {
	        location.href = "./applyInstalment.html" + location.search;
	    });
	    initStyle();
	    getConfig();
	});


	function initVale() {
	    cardFeeRate = parseFloat(zcom.QueryString.GetValue("cardFeeRate"));
	    merId = zcom.QueryString.GetValue("merId");
	    openid = zcom.QueryString.GetValue("openid");
	    merName = zcom.QueryString.GetValue("merName");
	    prdt_no = zcom.QueryString.GetValue("prdt_no");
	    if (merName) {
	        document.title = decodeURI(merName);
	    }
	}

	// 根据设备计算一些样式
	function initStyle() {
	    setInterval(function() {
	        var orderTiShiHeight = parseInt(($("body")[0].scrollHeight - 360) / 2);
	        $("#orderTiShi .modal-dialog").css("margin-top", orderTiShiHeight + "px");

	    }, 500);

	}


	function applyLfqOrder() {
	    $("input").blur();
	    if ($("#submitA").hasClass("btn_disabled")) {
	        return;
	    }
	    var lfq_amt = zcom.QueryString.GetValue("lfq_amt");
	    var lfq_cnt = zcom.QueryString.GetValue("lfq_cnt");
	    var contentMonet = (parseFloat(lfq_amt) * (1 + cardFeeRate / 100) + 0.0001).toFixed(2);
	    var eachMoney = num.hold2bit(parseFloat(contentMonet) / stageNumber);
	    var eachPrincipal = num.hold2bit(lfq_amt / stageNumber);
	    var eachFeeNum = parseFloat(eachMoney) - parseFloat(eachPrincipal);
	    //    $("#ts_amt").text(lfq_amt + "元");
	    $("#ts_cnt").text(lfq_cnt + "期");
	    //    $("#ts_sxf").text(parseFloat(lfq_amt * cardFeeRate / 100).toFixed(2) + "元");
	    //    $("#ts_yhk").text($("#creditCard").val());
	    $("#ts_amt").text(lfq_amt + "元");
	    $("#ts_mqhk").text(eachMoney + "元");
	    $("#ts_mqsxf").text(eachFeeNum.toFixed(2));
	    myDialog.showModals("orderTiShi");

	}

	// 确认申请分期提交表单
	function applyLfqOrder2() {
	    $("#orderTiShi").hide();
	    $(".modal-content").hide();
	    $(".modal-content2").show();
	    myDialog.showModals();

	    var param = getParameters(); // 参数字符形式 
	    console.log(param); //把字符串打印到控制台 调试用的  


	    try {
	        zcom.postAjax(LFQ_ORDER_CREATE_URL, param, retnFunc);
	    } catch (e) {
	        $("#msg_lable").text("网络无法连接");
	        $(".modal-content").show();
	        $(".modal-content2").hide();
	        myDialog.showModals(); // 显示提示框
	    }

	}

	// 回调函数
	function retnFunc(retn) {
	    var tipmsg = "init";
	    var resmsg = "";
	    var des_openid = "";
	    if (retn.lft_orderinfo_response != undefined) {
	        if (retn.lft_orderinfo_response.resp_code == "0000") { //如果成功 
	            window.location.href = "qrcodePay.html?payCode=" + retn.lft_orderinfo_response.serial_no + '&card_6th=' + card_6th + '&open_id=' + zcom.QueryString.GetValue("openid");
	            return;
	        } else {
	            tipmsg = retn.lft_orderinfo_response.resp_msg;
	        }
	    } else {
	        if (retn.error_response != undefined) {
	            resmsg = retn.error_response.resp_code;
	            tipmsg = retn.error_response.resp_msg ? retn.error_response.resp_msg : retn.error_response.sub_msg;
	        } else if (retn.user_acct_response != undefined) {
	            resmsg = retn.user_acct_response.is_black;
	            des_openid = retn.des_open_id
	        } else {
	            tipmsg = "当前服务请求出错，请重新查询";
	        }

	        if (resmsg == 'WRONG0001') {
	            tipmsg = "短信验证码出错";
	        } else if (resmsg == 'WRONG999') {
	            tipmsg == "申请服务异常";
	        }
	    }

	    if (resmsg == 'B00002') { //表示该手机号已开某通联卡，但是未有绑定微信号
	        //直接跳转到绑定通联卡页面
	        var parameters = getParameters();
	        for (var i = 0, l = parameters.length; i < l; i++) {
	            if (parameters[i].name == "lfq_amt") {
	                parameters[i].value = parameters[i + 1].value;
	            }
	        }
	        parameters.lfq_amt = parameters.goods_amount;
	        var paramStr = $.param(parameters);
	        window.location.href = BASE_URL + "FuLiBao/protocol_members.html?" + paramStr + "&jm_openid=" + openid + "&openid=" + des_openid + "&merName=" + merName;
	        return;
	    }

	    if (tipmsg != "init") {
	        if (tipmsg == "经度不能为空") {
	            location.href = "./positionPrompt.html";
	            tipmsg = "请授权微信和小通金服获得地理位置</br>功能后再办理该业务。"
	        }
	        $("#msg_lable").html(tipmsg);
	        $(".modal-content").show();
	        $(".modal-content2").hide();
	        myDialog.showModals(); // 显示提示框
	    }
	}

	// 拼接请求参数
	function getParameters() {
	    var userName = $("#user-name").val();
	    var userId = $("#user-id").val().replace(/ /g, "");
	    var CardNum = $("#creditCard").val().replace(/ /g, "");
	    var parameters = [{
	        name: "open_id",
	        value: zcom.QueryString.GetValue("openid")
	    }, {
	        name: "hp_no",
	        value: $("#user-phone").val().replace(/ /g, "")
	    }, {
	        name: "cust_name",
	        value: userName
	    }, {
	        name: "id_no",
	        value: userId
	    }, {
	        name: "lfq_cnt",
	        value: zcom.QueryString.GetValue("lfq_cnt")
	    }, {
	        name: "lfq_amt",
	        value: (parseFloat(zcom.QueryString.GetValue("lfq_amt")) * (1 + cardFeeRate / 100) + 0.0001).toFixed(2)
	    }, {
	        name: "goods_amount",
	        value: zcom.QueryString.GetValue("lfq_amt")
	    }, {
	        name: "creditCard",
	        value: CardNum
	    }, {
	        name: "cvn2Num",
	        value: $("#cvn2Num").val()
	    }, {
	        name: "timeNum",
	        value: $("#timeNum").val()
	    }, {
	        name: "servlet_type",
	        value: "create_order"
	    }, {
	        name: "merId",
	        value: zcom.QueryString.GetValue("merId")
	    }, {
	        name: "cardFeeRate",
	        value: zcom.QueryString.GetValue("cardFeeRate")
	    }, {
	        name: "verify_code",
	        value: $("#verify-code").val()
	    }, {
	        name: "prdt_no",
	        value: prdt_no
	    }, {
	        name: "lat",
	        value: latitude
	    }, {
	        name: "lng",
	        value: longitude
	    }]; //请求参数

	    card_6th = CardNum.substr(CardNum.length - 6); // 传到付款码页面用于重新生成串码
	    return parameters;
	}

	// 配置config
	function getConfig() {
	    console.log("getLocation.....");
	    map.getConfig({
	        mapUrl: "/lfq/applyNextStep.html" + location.search
	    });
	    getLocation();
	}
	// 配置成功获取经纬度
	function getLocation() {
	    wx.ready(function() {

	        wx.getLocation({
	            type: "gcj02",
	            success: function(res) {

	                console.log("getLocation data");
	                console.dir(res);
	                latitude = res.latitude;
	                longitude = res.longitude;
	                //               alert(res.latitude + " " + res.longitude);

	            },
	            fail: function() {
	                location.href = "./positionPrompt.html";
	            },
	            cancel: function(res) {
	                location.href = "./positionPrompt.html";
	            }
	        });
	    });
	}



	// 禁用或启用按钮
	function isDisabledSubmit() {
	    var isCnName = authentication.isCnName($("#user-name").val());
	    var isSFZNo = authentication.isSFZNo($("#user-id").val().replace(/ /g, ""));
	    var isCvn2Num = $("#cvn2Num").val().length < 3 ? false : true;
	    var istimeNum = authentication.isTimeNum($("#timeNum").val());
	    var isPhone = $("#user-phone").val().replace(/ /g, "").length == 11;
	    var isYZM = authentication.isNum($("#verify-code").val(), 4);
	    var XYKNum = $creditCard.val().replace(/ /g, "");
	    var isXYKNum = authentication.isXYKNum(XYKNum);

	    if (isCnName && isSFZNo && isCvn2Num && istimeNum && isPhone && isYZM && isXYKNum) {
	        $("#submitA").removeClass("btn_disabled");
	        $("#submitA").addClass("btn_primary");
	    } else {
	        $("#submitA").removeClass("btn_primary");
	        $("#submitA").addClass("btn_disabled");
	    }
	}

	// 绑定姓名输入框事件
	function inintUserNameEvent() {

	    $("#user-name").on("input", function() {
	        isDisabledSubmit();
	    });
	    $("#user-name").on("change  blur", changUserName);
	    $("#user-name").on("keyup", function() {
	        view.getFocus("#user-id");
	    });
	}
	// 姓名输入完 验证
	function changUserName() {
	    $userName = $("#user-name");
	    var $eventTargetParentNode = $userName.parent().parent();
	    var isCnName = authentication.isCnName($userName.val());
	    var userNameLength = authentication.strLen($userName.val());
	    authentication.addOrRemoveErro(true, "userName-erro", "名字错误", $eventTargetParentNode);
	    if (!isCnName || userNameLength > 20) {
	        if (userNameLength > 20 || userNameLength < 4) {
	            authentication.addOrRemoveErro(false, "userName-erro", "名字长度不符合要求", $eventTargetParentNode);
	        } else {
	            authentication.addOrRemoveErro(isCnName, "userName-erro", "名字错误", $eventTargetParentNode);
	        }
	    }

	}

	// 绑定身份证号输入框事件
	function initUserIdEvent() {
	    $("#user-id").on("change blur", changeUserId);
	    $("#user-id").on("input", function() {
	        $(this).val($(this).val().toUpperCase());
	        deleteNoNumberX($(this)[0]);
	        if (!($("#cvn2Num").val().length == 3)) {
	            view.getFocus("#cvn2Num");
	        }
	        isDisabledSubmit();
	    });
	    $("#user-id").on("keyup", function() {
	        view.deleteSpace(event.keyCode, "#user-id");
	        if (event.keyCode != 8 && event.keyCode != 37 && event.keyCode != 39) {
	            view.spaceuserId();
	        }
	        view.getFocus("#creditCard");
	    });
	}

	function deleteNoNumberX(obj) {
	    var reg = /[^\dX\*\s]/;
	    if (reg.test(obj.value) || obj.value == "") {
	        obj.value = obj.value.replace(/[^\dX\*\s]/g, "");
	    }
	    if (/[\*]/.test(obj.value)) {
	        obj.value = obj.value.replace(/[\*]/g, "X");
	    }
	}


	// 身份者输入完毕验证 
	function changeUserId() {
	    var $eventTargetParentNode = $("#user-id").parent().parent();
	    var isSFZNo = authentication.isSFZNo($("#user-id").val().replace(/  /g, ""));
	    authentication.addOrRemoveErro(isSFZNo, "sfz-erro", "身份证号码格式错误", $eventTargetParentNode);
	}

	// 绑定信用卡输入事件
	function inintCreditCardEvent() {
	    $creditCard = $("#creditCard");
	    $creditCard.on("change blur", changeCreditCard);
	    $creditCard.on("keyup", function() {
	        view.deleteSpace(event.keyCode, "#creditCard");
	        if (event.keyCode != 8 && event.keyCode != 37 && event.keyCode != 39) {
	            view.deleteNoNumber(this);
	            view.spaceCardNum();
	        }
	        view.getFocus("#cvn2Num");
	    });
	    $creditCard.on("input", function() {
	        isDisabledSubmit();
	    })
	}

	// 信用卡输入完毕验证
	function changeCreditCard() {
	    $creditCard = $("#creditCard");
	    var $eventTargetParentNode = $creditCard.parent().parent();
	    var XYKNum = $creditCard.val().replace(/ /g, "");
	    var isXYKNum = authentication.isXYKNum(XYKNum);
	    authentication.addOrRemoveErro(isXYKNum, "isXYKNum-erro", "信用卡格式错误", $eventTargetParentNode);
	}

	// 绑定CVN2输入框事件
	function initCVN2Event() {
	    $cvn2Num = $("#cvn2Num");
	    $cvn2Num.on("change blur", changeCvn2Num);
	    $cvn2Num.on("input", function() {
	        this.value = this.value.replace(/[^\d]/g, "");
	        var cvn2NumVal = new String($cvn2Num.val());
	        if (cvn2NumVal.length > 3) {
	            $cvn2Num.val(cvn2NumVal.substr(0, 3));
	        }
	        isDisabledSubmit();
	    });
	    $cvn2Num.on("keyup", function() {
	        view.getFocus("#timeNum");
	    });

	}
	//验证CVN2 格式
	function changeCvn2Num() {
	    var cvn2Num = $("#cvn2Num").val();
	    var isCvn2Num = cvn2Num.length < 3 ? false : true;
	    var $eventTargetParentNode = $("#cvn2Num").parent().parent();
	    authentication.addOrRemoveErro(isCvn2Num, "isCvn2Num-erro", "CVN2格式错误", $eventTargetParentNode);
	}

	// 绑定时间输入框事件
	function initTimeNumEvent() {
	    $timeNum = $("#timeNum");
	    $timeNum.on("change blur", changeTimeNum);
	    $timeNum.on("input", function() {
	        view.deleteNoNumber(this);
	        var timeNumVal = new String($timeNum.val());
	        if (timeNumVal.length > 4) {
	            $timeNum.val(timeNumVal.substr(0, 4));
	        }
	        isDisabledSubmit();
	    });
	    $timeNum.on("keyup", function() {
	        view.getFocus("#user-phone");
	    });
	}

	// 验证有效时间
	function changeTimeNum() {
	    var timeNum = $("#timeNum").val();
	    var istimeNum = authentication.isTimeNum(timeNum);
	    var $eventTargetParentNode = $("#timeNum").parent().parent();
	    authentication.addOrRemoveErro(istimeNum, "istimeNum-erro", "有效时间格式错误", $eventTargetParentNode);
	}

	// 绑定手机号事件
	function inintphoneEvent() {
	    $("#user-phone").on("change blur", changeUserPhone);
	    $("#user-phone").on("keyup", function() {
	        view.deleteSpace(event.keyCode, "#user-phone");
	        if (event.keyCode != 8 && event.keyCode != 37 && event.keyCode != 39) {
	            view.deleteNoNumber(this);
	            view.spacePhoneNum();
	        }

	        if (getVerifyCodeDJS == 60 && $("#user-phone").val().replace(/ /g, "").length == 11) {
	            $("#verifyBtn").removeClass("disabled");
	        }
	        if (event.keyCode == 13) {
	            $("input").blur();
	        }
	        isDisabledSubmit();
	    });
	}
	//电话输入完 验证
	function changeUserPhone() {
	    var userPhone = $("#user-phone").val().replace(/ /g, "");
	    var $eventTargetParentNode = $("#user-phone").parent().parent();
	    var isPhone = !(userPhone.length < 11);
	    authentication.addOrRemoveErro(isPhone, "phoneNum-erro", "手机号码错误", $eventTargetParentNode);
	}

	//请求 验证码
	function getVerifyCode() {
	    if ($verifyBtn.hasClass("disabled")) { //60秒之内
	        return;
	    } else { //发送短信 禁用60秒
	        //发送短信
	        // 禁用60秒
	        $verifyBtn.addClass("disabled");
	        $verifyBtn.text("重新获取(" + getVerifyCodeDJS + "S)");

	        var setIntervarHandle = setInterval(function() {
	            getVerifyCodeDJS--;
	            $verifyBtn.text("重新获取(" + getVerifyCodeDJS + "s)")
	            if (getVerifyCodeDJS == 0) {
	                $verifyBtn.text("重新获取");
	                clearInterval(setIntervarHandle);
	                $verifyBtn.removeClass("disabled");
	                getVerifyCodeDJS = 60;
	            };
	        }, 1000);

	        getAjaxCode();
	    }
	}

	// 发送验证码请求
	function getAjaxCode() {
	    var url = LFQ_SMS_SEND_URL;
	    var hp_no = $("#user-phone").val().replace(/ /g, "");
	    var param = {
	        hp_no: hp_no,
	        openid: openid,
	        prdt_no: prdt_no
	    };
	    zcom.getAjax(url, param, function(retn) {
	        console.log("验证码请求结果");
	        console.dir(retn);
	    });
	}


	// 绑定验证码事件
	function inintYZMEvent() {
	    var verifyCode = $("#verify-code");
	    verifyCode.on("change blur", changeYZM);
	    verifyCode.on("input", function() {
	        view.deleteNoNumber(this);
	        view.getFocus("#submitA");
	        isDisabledSubmit();
	    });

	}
	// 验证码输完后验证提示
	function changeYZM() {
	    var verifyCode = $("#verify-code");
	    var $eventTargetParentNode = verifyCode.parent().parent();
	    var isNum = authentication.isNum(verifyCode.val(), 4);
	    authentication.addOrRemoveErro(isNum, "yzm-erro", "验证码错误", $eventTargetParentNode);
	}


	// 查看输入CVN2事件
	function initYanjingIconEvent() {
	    $(".yanjing_icon").on("touchstart", function() {
	        setBackground("yanjing2_icon.png");
	        $("#cvn2Num").attr("type", "number");
	    });
	    $(".yanjing_icon").on("touchend", function() {
	        setTimeout(function() {
	            setBackground("yanjing_icon.png");
	            $("#cvn2Num").attr("type", "password");
	        }, 3000);
	    });

	    function setBackground(pngName) {
	        $(".yanjing_icon").css("background", 'url("../images/' + pngName + '")');
	        $(".yanjing_icon").css("background-repeat", 'no-repeat');
	        $(".yanjing_icon").css("background-position", '5px 5px');
	        $(".yanjing_icon").css("background-size", '23px 14px');
	    }
	}

	// 根据链接填写资料
	function setInfo() {
	    var nameKeys = ["creditCard", "hp_no", "verify_code", "id_no", "cvn2Num", "timeNum"];
	    for (var i = 0, l = nameKeys.length; i < l; i++) {
	        if (zcom.QueryString.GetValue(nameKeys[i]) && zcom.QueryString.GetValue(nameKeys[i]) != "") {
	            $("[name=" + nameKeys[i] + "]").val(zcom.QueryString.GetValue(nameKeys[i]));
	        }
	    }
	    view.spaceCardNum();
	    view.spacePhoneNum();
	    view.spaceuserId();

	    if (zcom.QueryString.GetValue("cust_name") && zcom.QueryString.GetValue("cust_name") != "") {
	        $("[name=cust_name]").val(decodeURI(zcom.QueryString.GetValue("cust_name")));
	    }

	    if (zcom.QueryString.GetValue("lfq_cnt") && zcom.QueryString.GetValue("lfq_cnt") != "") {
	        $("#stageNumberBox>span").removeClass("checked");
	        $("span[data-number='" + zcom.QueryString.GetValue("lfq_cnt") + "']").addClass("checked");
	        stageNumber = parseInt(zcom.QueryString.GetValue("lfq_cnt"));
	    }

	    if (zcom.QueryString.GetValue("lfq_amt") && zcom.QueryString.GetValue("lfq_amt") != "") {
	        if ($("#user-phone").val().replace(/ /g, "").length == 11) {
	            $("#verifyBtn").removeClass("disabled");
	        }
	    }

	    isDisabledSubmit();
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	// 获取url参数
	var QueryString = {
	    data: {},
	    Initial: function() {
	        var aPairs, aTmp;
	        var queryString = new String(window.location.search);
	        queryString = queryString.substr(1, queryString.length);
	        aPairs = queryString.split("&");
	        for (var i = 0; i < aPairs.length; i++) {
	            aTmp = aPairs[i].split("=");
	            this.data[aTmp[0]] = aTmp[1];
	        }
	    },
	    GetValue: function(key) {
	        return this.data[key];
	    }
	}


	//移动端检查
	function checkBrowser() {
	    var u = navigator.userAgent.toLowerCase();
	    if (u.indexOf('mobile') == -1 && u.indexOf('iphone') == -1) {
	        window.location.href = "../error_browser.html";
	    }
	}

	function postAjax(url, param, callBack, asyncVal) {
	    var av = asyncVal ? asyncVal : false;
	    $.ajax({
	        type: 'post',
	        dataType: "json",
	        url: url,
	        data: param,
	        cache: false,
	        async: false,
	        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	        success: function(msg) {
	            callBack(msg);
	        },
	        error: function(msg) {
	            callBack(msg);
	        }
	    });
	}

	function getAjax(url, param, callBack) {
	    $.ajax({
	        type: 'get',
	        dataType: "json",
	        url: url,
	        data: param,
	        cache: false,
	        async: false,
	        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	        success: function(msg) {
	            callBack(msg);
	        },
	        error: function(msg) {
	            callBack(msg);
	        }
	    });
	}

	//   不打包形式
	/*
	require.register("../components/winLocation.js", function(module, exports, require) {
	    module.exports = {
	        QueryString: QueryString,
	        checkBrowser: checkBrowser,
	        postAjax: postAjax,
	        getAjax: getAjax
	    }
	});
	*/
	// 打包形式

	module.exports = {
	    QueryString: QueryString,
	    checkBrowser: checkBrowser,
	    postAjax: postAjax,
	    getAjax: getAjax
	}

/***/ },
/* 2 */
/***/ function(module, exports) {

	/**
	 * 提示框 用于替代myDialog.js
	 */
	function hideModal(modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    var theModal = document.getElementById(idName);
	    theModal.style.display = "none";
	}

	function showModals(modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    var theModal = document.getElementById(idName);
	    var bWidth = parseInt(document.documentElement.clientWidth);
	    var bHeight = parseInt(document.documentElement.clientHeight);

	    $(".modal>.back").css({
	        "top": "0px",
	        "left": "0px",
	        "position": "absolute",
	        "background": "#666",
	        "width": "100%",
	        "height": "100%",
	        "opacity": 0.40,
	    });

	    theModal.style.display = "block";

	}

	// 设置提示内容
	function setModalBody(modalBody,modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    $("#"+idName+" .modal-body").html(modalBody);
	}

	function showBodalBody(modalBody,modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    setModalBody(modalBody);
	    showModals(idName);
	}

	// 初始化
	(function init() {
	    $("#modalButton").parent().on("touchend", function() {
	        hideModal();
	        event.preventDefault();
	    });
	})();


	// 不打包形式  要加载requrie.js
	/*
	require.register("./cmodal.js", function(module, exports, require) {
	    module.exports = {
	        setModalBody: setModalBody,
	        hideModal: hideModal,
	        showModals: showModals,
	        showBodalBody: showBodalBody
	    };
	});
	*/
	// 打包形式

	module.exports = {
	    setModalBody: setModalBody,
	    hideModal: hideModal,
	    showModals: showModals,
	    showBodalBody: showBodalBody
	}

/***/ },
/* 3 */
/***/ function(module, exports) {

	// 清除"数字"和"."以外的字符
	function clearNoNum(obj) {
	    obj.value = parseFloat(obj.value.replace(/[^\d.]/g, "")); //清除"数字"和"."以外的字符
	    obj.value = obj.value.replace(/^\./g, ""); //验证第一个字符是数字而不是
	    obj.value = obj.value.replace(/\.{2,}/g, "."); //只保留第一个. 清除多余的
	    obj.value = obj.value.replace(".", "$#$").replace(/\./g, "").replace("$#$", ".");
	    obj.value = obj.value.replace(/^(\-)*(\d+)\.(\d\d).*$/, '$1$2.$3'); //只能输入两个小数
	}

	// 把输入的大于可输入的最大值时，替换成最大值
	function monreMax(obj, max) {
	    inputValue = obj.value;
	    if (parseFloat(inputValue) > parseFloat(max)) {
	        obj.value = max;
	    }
	}

	// 保留两位小数
	function input2bit(obj) {
	    if (obj.value.search(/\.\d{3,}/) != -1) {
	        clearNoNum(obj);
	    }
	}

	// 禁止数字和.以外的字符输入
	function deleteNoNumber(obj) {
	    var reg = /[^\d.]/;
	    if (reg.test(obj.value) || obj.value == "") {
	        obj.value = obj.value.replace(/[^\d.]/g, "");
	    }
	}

	// 截取两位小数
	function hold2bit(theNum) {
	    var theNum2bit = String(theNum);
	    if(String(theNum).match(/[0-9,]{0,}\.\d\d/)){
	        theNum2bit = String(theNum).match(/[0-9,]{0,}\.\d\d/)[0];
	    }else if(String(theNum).match(/[0-9,]{0,}\.\d/)){
	        theNum2bit += '0';
	    }else if(String(theNum).match(/[0-9,]{0,}\./)){
	        theNum2bit += '00';
	    }else if(String(theNum).match(/[0-9,]{0,}/)){
	        theNum2bit += '.00';
	    }
	    return theNum2bit;
	}



	// 打包形式

	module.exports = {
	    clearNoNum: clearNoNum,
	    monreMax: monreMax,
	    input2bit: input2bit,
	    deleteNoNumber: deleteNoNumber,
	    hold2bit: hold2bit
	}

/***/ },
/* 4 */
/***/ function(module, exports) {

	// 验证身份证格式
	function isSFZNo(card) {
	    var iscarNum = true;
	    // 身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X  
	    var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
	    if (reg.test(card) === false) { //身份证输入不合法
	        iscarNum = false;
	    }

	    return iscarNum;
	}

	// 验证信用卡格式
	function isXYKNum(sText) {
	    if (sText.length >= 13 && sText.length <= 16) {
	        var numStr2 = sText.match(/\d*/i)[0];
	        return numStr2 == sText ? true : false;
	    } else {
	        return false;
	    }
	}

	// 验证四位时间 2016年04月 0416
	function isTimeNum(timeNum) {
	    var istNum = true;
	    if (timeNum.length < 4 || parseInt(timeNum.substr(0, 2)) > 12 || parseInt(timeNum.substr(0, 2)) < 1) {
	        istNum = false;
	    } else {
	        //验证是否 大于现在
	        istNum = isNextYearMonth(timeNum.substr(2, 2), timeNum.substr(0, 2));
	    }


	    return istNum;
	}

	// 年份大于现在 参数字符串数字'16':2016 ,16:2016。年份相同也是大于
	function isNextYear(yearStr) {
	    var isNext = "more"; // 默认年大于现在
	    var theNow = new Date();
	    yearStr = yearStr.toString();

	    if (yearStr.length == 4) {
	        if (theNow.getFullYear() > parseInt(yearStr)) {
	            isNext = "less"; // 年份小于现在
	        } else if (theNow.getFullYear() == parseInt(yearStr)) {
	            isNext == "same" // 同样年份
	        }
	    } else if (yearStr.length > 4 || yearStr.length == 0) {
	        isNext = "erro"; // 位数错误
	    } else {
	        theYear2 = theNow.getFullYear().toString().substr(2, 4);
	        if (parseInt(theYear2) > parseInt(yearStr)) {
	            isNext = "less";
	        } else if (parseInt(theYear2) == parseInt(yearStr)) {
	            isNext = "same" // 同样年份
	        }
	    }

	    return isNext;
	}

	// 月份是否大于 现在
	function isNextMonth(monthStr) {
	    var isNext = true;
	    var theNow = new Date();
	    if (theNow.getMonth() > parseInt(monthStr) - 1) {
	        isNext = false;
	    }
	    return isNext;
	}

	function isNextYearMonth(yearStr, monthStr) {
	    var isMoreYear = isNextYear(yearStr);
	    if (isMoreYear == "more") {
	        return true;
	    } else if (isMoreYear == "less") {
	        return false;
	    } else if (isMoreYear == "same") {
	        if (isNextMonth(monthStr)) {
	            return true;
	        }
	    } else {
	        return false;
	    }
	}

	//验证手机号
	function isPhoneNumber(phoneNumber) {
	    var reVisa = /\d{11}/;
	    if (reVisa.test(phoneNumber)) {
	        return true;
	    } else {
	        return false;
	    }
	}

	// 检查中文名，不能包含非中文字符
	function isCnName(cnName) {
	    var cnNameLength = len(cnName);
	    if (cnNameLength > 4 && cnNameLength < 20) {
	        return true;
	    } else {
	        return false;
	    }
	}

	//取字符串长度，中文算2位
	function len(s) {
	    var l = 0;
	    var a = s.split("");
	    for (var i = 0; i < a.length; i++) {
	        if (a[i].charCodeAt(0) < 299) {
	            l++;
	        } else {
	            l += 2;
	        }
	    }
	    return l;
	}

	// 验证输入是否为整数
	function isNum(numStr, numLength) {
	    if (numStr != null && numStr.length == numLength) {
	        var numStr2 = numStr.match(/\d*/i)[0];
	        return numStr2 == numStr ? true : false;
	    }
	    return false;
	}

	// 添加或移除错误提示
	function addOrRemoveErro(isErro, erroId, erroText, $eventTargetParentNode) {
	    var $erroDom = $("#" + erroId);
	    if (isErro) {
	        if ($erroDom.length > 0) {
	            $erroDom.remove();
	        }
	    } else if ($erroDom.length == 0) {
	        $eventTargetParentNode.after('<div class="input-erro" id="' + erroId + '">' + erroText + '！</div>');
	    }
	}

	//   不打包形式
	/*
	require.register("./authentication.js", function(module, exports, require) {
	    module.exports = {
	        isSFZNo: isSFZNo,
	        isXYKNum: isXYKNum,
	        isTimeNum: isTimeNum,
	        isPhoneNumber: isPhoneNumber,
	        isCnName: isCnName,
	        addOrRemoveErro: addOrRemoveErro,
	        isNum: isNum
	    }
	});
	*/
	// 打包形式

	module.exports = {
	    isSFZNo: isSFZNo,
	    isXYKNum: isXYKNum,
	    isTimeNum: isTimeNum,
	    isPhoneNumber: isPhoneNumber,
	    isCnName: isCnName,
	    addOrRemoveErro: addOrRemoveErro,
	    isNum: isNum,
	    strLen:len
	}

/***/ },
/* 5 */
/***/ function(module, exports) {

	/* 间隔身份证号 */
	function spaceuserId() {
	    var $userId = $("#user-id"),
	        userIdVal = $userId.val(),
	        needUserIdVal = $userId.val().replace(/ /g, "");
	    if (needUserIdVal.length > 6 && needUserIdVal.length <= 14) {
	        userIdVal = needUserIdVal.substr(0, 6) + "  " + needUserIdVal.substr(6);
	    } else if (needUserIdVal.length > 14) {
	        userIdVal = needUserIdVal.substr(0, 6) + "  " + needUserIdVal.substr(6, 8) + "  " + needUserIdVal.substr(14);
	    }
	    $userId.val(userIdVal);
	}

	/* 间隔手机号 */
	function spacePhoneNum() {
	    $userPhone = $("#user-phone"),
	        userPhoneVal = $userPhone.val(),
	        needPhoneVal = $userPhone.val().replace(/ /g, "");
	    if (needPhoneVal.length > 3 && needPhoneVal.length < 7) {
	        userPhoneVal = needPhoneVal.substr(0, 3) + "  " + needPhoneVal.substr(3);

	    } else if (needPhoneVal.length > 7) {
	        userPhoneVal = needPhoneVal.substr(0, 3) + "  " + needPhoneVal.substr(3, 4) + "  " + needPhoneVal.substr(7);
	    }
	    $userPhone.val(userPhoneVal);
	}

	/* 间隔信用卡号 */
	function spaceCardNum() {
	    $creditCard = $("#creditCard"),
	        creditCardVal = $creditCard.val(),
	        needCardVal = $creditCard.val().replace(/ /g, "");
	    if (needCardVal.length == 5) {
	        creditCardVal = needCardVal.substr(0, 4) + "  " + needCardVal.substr(4);

	    } else if (needCardVal.length == 9) {
	        creditCardVal = needCardVal.substr(0, 4) + "  " + needCardVal.substr(4, 4) + "  " + needCardVal.substr(8);
	    } else if (needCardVal.length == 13) {
	        creditCardVal = needCardVal.substr(0, 4) + "  " + needCardVal.substr(4, 4) + "  " + needCardVal.substr(8, 4) + "  " + needCardVal.substr(12);
	    }
	    $creditCard.val(creditCardVal);
	}

	/* 删除分隔符 */
	function deleteSpace(eventCode, selector) {
	    if (eventCode == 8) {
	        /* 按backspace键 */
	        $selector = $(selector);
	        selectorValue = $selector.val();
	        while (selectorValue[selectorValue.length - 1] == " ") {
	            selectorValue = selectorValue.substr(0, selectorValue.length - 1)
	        }
	        $(selector).val(selectorValue);
	    }

	}

	/* 删除最后一个键盘输入不是数字 */
	function deleteNoNumber(_this) { 
	//    var codeValue = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+.,?;:'|-·";
	    var reg = /[^\d]/;
	    $_this = $(_this);
	    var thisValue = $_this.val();
	    var lastCode = thisValue[thisValue.length-1];
	    if (reg.test(lastCode)) {
	        $(_this).val(thisValue.replace(/[^\d]/g,""));
	    }
	}

	// 获得焦点
	function getFocus(focusId) {
	    if (event.keyCode == 13) {
	        $(focusId).focus();
	    }
	}

	// 清除"数字"和"."以外的字符
	function clearNoNum(obj) {
	    obj.value = obj.value.replace(/[^\d.]/g, ""); //清除"数字"和"."以外的字符
	    obj.value = obj.value.replace(/^\./g, ""); //验证第一个字符是数字而不是
	    obj.value = obj.value.replace(/\.{2,}/g, "."); //只保留第一个. 清除多余的
	    obj.value = obj.value.replace(".", "$#$").replace(/\./g, "").replace("$#$", ".");
	    obj.value = obj.value.replace(/^(\-)*(\d+)\.(\d\d).*$/, '$1$2.$3'); //只能输入两个小数
	}

	/*
	// 不打包形式  要加载requrie.js
	require.register("./views/applyView.js", function(module, exports, require) {
	    module.exports = {
	        spaceuserId: spaceuserId,
	        spacePhoneNum: spacePhoneNum,
	        getFocus: getFocus,
	        spaceCardNum:spaceCardNum,
	        clearNoNum: clearNoNum,
	        deleteSpace: deleteSpace,
	        deleteNoNumber: deleteNoNumber

	    };
	});
	*/
	// 打包形式

	module.exports = {
	    spaceuserId: spaceuserId,
	    spacePhoneNum: spacePhoneNum,
	    getFocus: getFocus,
	    spaceCardNum: spaceCardNum,
	    clearNoNum: clearNoNum,
	    deleteSpace: deleteSpace,
	    deleteNoNumber: deleteNoNumber
	}


/***/ },
/* 6 */
/***/ function(module, exports) {

	var getLocation,openLocation;

	// 获取config配置数据
	function getConfig(param) {
	    var locationObject;
	    $.ajax({
	        type: 'post',
	        dataType: "json",
	        url: LFQ_PLACE_URL,
	        data: param,
	        cache: false,
	        async: false,
	        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	        success: function(msg) {
	            console.dir(msg);
	            locationObject = msg;
	            setConfig(msg);
	        },
	        error: function(msg) {
	            var response = JSON.parse(msg.response);
	            console.dir(response);
	            setConfig(response);

	        }
	    });

	    return locationObject;
	}


	function setConfig(msg) {
	    wx.config({
	        debug: false,
	        appId: msg.appid, //'wxf8b4f85f3a794e77',
	        timestamp: msg.timestamp,
	        nonceStr: msg.nonceStr,
	        signature: msg.signature,
	        jsApiList: [
	            'openLocation',
	            'getLocation'
	        ]
	    });

	}

	// 打包形式

	module.exports = {
	    getConfig: getConfig,
	    getLocation: getLocation,
	    openLocation: openLocation
	}

/***/ }
]);