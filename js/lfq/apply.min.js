webpackJsonp([0,5],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var wl = __webpack_require__(1);
	var myDialog = __webpack_require__(2);
	var num = __webpack_require__(3);
	var stageNumber = 6;
	var cardFeeRate = 0.00;
	var applyNum = 0.00;
	var maxApply = 0.00;
	var isAllow = false;
	var openid = '';
	var amtUplimit = 20000;
	var amtLowLimit = 600;
	var selectItems = [];
	var rateArrays = [];
	var lfq_mer_no = 0;

	var merName, merId, sceneId, prdt_no;
	$(function() {
	    document.addEventListener('WeixinJSBridgeReady', function onBridgeReady() {
	        // 通过下面这个API隐藏右上角按钮
	        wx.hideOptionMenu();
	    });
	    wl.QueryString.Initial();
	    initVale();
	    getParameter();
	    $("#applyInstalmentNum").on("input", inputApplyInstalmentNum);
	    inint();
	    initAgreementCheck();
	    $("#next-step").on("touchstart", function() {
	        nextStepFunc();
	    });
	    setContractHref();
	});

	//  设置合同的连接
	function setContractHref() {
	    var theHref = "contract.html?openid=" + openid + "&sceneId=" + sceneId + "&cardFeeRate=" + cardFeeRate + "&merId=" + merId + "&merName=" + merName + "&lfq_cnt=" + stageNumber;
	    if (applyNum != 0.00 && applyNum != "") {
	        theHref += "&lfq_amt=" + applyNum;
	    }
	    $("#contract").attr("href", theHref);

	}

	//  初始化变量
	function initVale() {
	    sceneId = wl.QueryString.GetValue("sceneId");
	    /*    cardFeeRate = parseFloat(wl.QueryString.GetValue("cardFeeRate"));
	        merName = wl.QueryString.GetValue("merName");
	        merId = wl.QueryString.GetValue("merId");*/
	    openid = wl.QueryString.GetValue("openid");

	    if (wl.QueryString.GetValue("lfq_cnt")) {
	        stageNumber = wl.QueryString.GetValue("lfq_cnt");
	    }


	}

	// 请求期数和费率
	function getParameter() {
	    var param = {
	        "servlet_type": "query_mer_info",
	        "sceneId": sceneId
	    }
	    wl.postAjax(LFQ_ORDER_CREATE_URL, param, parameterCallBack);
	}

	// 请求期数回调函数
	function parameterCallBack(retn) {

	    console.log(retn);
	    if (retn.lfq_merinfo_response) {
	        lfq_mer_no = retn.lfq_merinfo_response.lfq_mer_no;
	        var merinfo = retn.lfq_merinfo_response;
	        merName = merinfo.mer_short_name ? merinfo.mer_short_name : merinfo.mer_name;
	        if (merinfo.mer_name) {
	            document.title = decodeURI(merName);
	        }
	        merId = merinfo.mer_id;
	        if (merinfo.mer_prdt_rate_arrays) { // 过渡先取6期12期
	            rateArrays = merinfo.mer_prdt_rate_arrays.mer_prdt_rate;
	            var rateArrays0 = rateArrays[0];
	            sessionStorage.setItem("prdtNo",rateArrays[0].prdtNo);
	            for (var i = 0, l = rateArrays.length; i < l; i++) {
	                if (parseInt(rateArrays[i].stageCount) == parseInt(stageNumber)) {
	                    rateArrays0 = rateArrays[i];
	                }
	                var eachItem = {};
	                eachItem.title = rateArrays[i].stageCount + "期";
	                eachItem.value = rateArrays[i].custRate;
	                selectItems.push(eachItem);
	            }
	            initRateInput(rateArrays0);
	        }
	    }
	    if (selectItems.length == 0) {
	        myDialog.setModalBody('<p>商家未设置费率</p>', 'tishuModal')
	        myDialog.showModals("tishuModal");
	    }
	    creatSelect(selectItems);

	}

	// 找出选中的期数数据
	function getSelectItem(stageNumber) {
	    var rateArrays0 = [];
	    for (var i = 0, l = rateArrays.length; i < l; i++) {
	        if (parseInt(rateArrays[i].stageCount) == parseInt(stageNumber)) {
	            rateArrays0 = rateArrays[i];
	        }
	    }

	    return rateArrays0;
	}

	// 设置最高额度 和最低额度
	function setlimit(selectRateItem) {
	    amtUplimit = selectRateItem.amtUplimit ? selectRateItem.amtUplimit : 20000;
	    amtLowLimit = selectRateItem.amtLowLimit ? selectRateItem.amtLowLimit : 600;
	}

	// 创建分期选项插件
	function creatSelect(selectItems) {
	    selectItems.sort(function(a, b) {
	        return parseInt(a.title) - parseInt(b.title)
	    });
	    $("#rate").select({
	        title: "分期期数",
	        items: selectItems,
	        onChange: function(d) {
	            cardFeeRate = d.values;
	            stageNumber = parseInt(d.titles);
	            var selectRateItem = getSelectItem(stageNumber);
	            setlimit(selectRateItem);
	            maxApply = amtUplimit / (1 + cardFeeRate / 100);
	            allowApplyNum();
	            computesEachPayNumber();
	            isDisabledNext();
	            $("#applyInstalmentNum").attr("placeholder", "目前只支持" + amtLowLimit + "-" + Math.floor(maxApply));
	            $("#maxApplyNum").text(Math.floor(maxApply));
	            $("#minApplyNum").text(amtLowLimit);
	            setContractHref();
	        }
	    });
	}

	function initRateInput(rateArrays0) {
	    prdt_no = rateArrays0.prdtNo;
	    setlimit(rateArrays0);
	    stageNumber = parseInt(rateArrays0.stageCount);
	    $("#rate").val(rateArrays0.stageCount + "期");
	    $("#rate").attr("data-values", rateArrays0.custRate);
	    cardFeeRate = rateArrays0.custRate;
	}

	// 初始化页面
	function inint() {
	    maxApply = amtUplimit / (1 + cardFeeRate / 100);
	    $("#maxApplyNum").text(Math.floor(maxApply));
	    $("#minApplyNum").text(amtLowLimit);
	    $("#applyInstalmentNum").attr("placeholder", "目前只支持" + amtLowLimit + "-" + Math.floor(maxApply));
	    //    $("#merName").text(decodeURI(merName));
	    setEachFee();
	    if (wl.QueryString.GetValue("lfq_cnt")) {
	        stageNumber = parseInt(wl.QueryString.GetValue("lfq_cnt"));
	        var theselecter = 'span[data-number="' + stageNumber + '"]';
	        var $parentNode = $(theselecter);
	        //        setStageNumClass($parentNode);
	    }
	    if (wl.QueryString.GetValue("lfq_amt")) {
	        $("#applyInstalmentNum").val(wl.QueryString.GetValue("lfq_amt"));
	        inputApplyInstalmentNum();
	    }
	    if ($("#applyInstalmentNum").val() != "") {
	        inputApplyInstalmentNum();
	    }
	}

	// 申请金额输入
	function inputApplyInstalmentNum() {
	    $applyInstalmentNum = $("#applyInstalmentNum");
	    num.input2bit($applyInstalmentNum[0]);
	    num.deleteNoNumber($applyInstalmentNum[0]);
	    num.monreMax($applyInstalmentNum[0], num.hold2bit(maxApply));
	    applyNum = $applyInstalmentNum.val();
	    if (applyNum == "") {
	        applyNum = 0.00;
	    } else {
	        applyNum = parseFloat(applyNum);
	    }

	    computesEachPayNumber();
	    allowApplyNum();
	    isDisabledNext();
	    setContractHref();
	}



	// 技术总金额，和每期金额
	function computesEachPayNumber() {
	    setEachFee();
	    var contentMonet = parseFloat(applyNum * (parseFloat(cardFeeRate) / 100) + 0.00001 + applyNum).toFixed(2);

	    var eachMoney = num.hold2bit(parseFloat(contentMonet) / stageNumber);
	    var eachPrincipal = num.hold2bit(applyNum / stageNumber);
	    var eachFeeNum = parseFloat(eachMoney) - parseFloat(eachPrincipal);
	    $("#eachFee").next().text(Math.round(parseFloat(applyNum) * parseFloat(cardFeeRate)) / 100);
	    $(".eachFeeNum").text(eachFeeNum.toFixed(2));
	    $("#eachPrincipal").text(eachPrincipal);
	    $("#eachMoney").text(eachMoney);
	    //    $("#countMoney").text(contentMonet);
	}

	function setEachFee() {
	    var eachFee = cardFeeRate / stageNumber;
	    $("#eachFee").text((eachFee + 0.0001).toFixed(2) + '%');
	}

	// 提示是否在允许的申请金额内
	function allowApplyNum() {

	    if (applyNum < amtLowLimit || applyNum > maxApply) {
	        isAllow = false;
	        $("label[for=applyInstalmentNum]").next().show();
	    } else {
	        isAllow = true;
	        $("label[for=applyInstalmentNum]").next().hide();
	    }

	    return isAllow;
	}

	function initAgreementCheck() {
	    var $agreementCheck = $("#agreement-check");
	    $agreementCheck.on("change", agreementCheckChange);
	    $("#checkButton").on("touchstart", agreementCheckParentFunc);
	}

	function agreementCheckParentFunc() {
	    var $agreementCheck = $("#agreement-check");
	    if ($agreementCheck.is(":checked")) {
	        $agreementCheck.prop('checked', false);
	    } else {
	        $agreementCheck.prop('checked', true);
	    }
	    agreementCheckChange();
	}

	//已阅读协议选择改变
	function agreementCheckChange() {
	    var $agreementCheck = $("#agreement-check");
	    if ($agreementCheck.is(":checked")) {
	        $agreementCheck.parent().addClass("checked");
	    } else {
	        $agreementCheck.parent().removeClass("checked");
	    }
	    isDisabledNext();
	}

	// 是否允许下一步
	function isDisabledNext(argument) {

	    var agreementValue = $("#agreement-check").is(":checked");
	    if (agreementValue && isAllow && selectItems.length != 0 /* && lfq_mer_no == "1"*/ ) {
	        $("#next-step").attr("class", "weui_btn weui_btn_primary");
	        setApplySessionStorage();
	    } else {
	        $("#next-step").attr("class", "weui_btn weui_btn_disabled weui_btn_default");
	    }
	}

	// 下一步 拼参数 发起请求
	function nextStepFunc() {
	    if (selectItems.length == 0) {
	        myDialog.setModalBody('<p>商家未设置费率</p>', 'tishuModal')
	        myDialog.showModals("tishuModal");
	        return;
	    }
	    var agreementValue = $("#agreement-check").is(":checked");
	    if (agreementValue && isAllow) {        
	        window.location.href = "applyNextStep.html"+location.search;
	    }
	}

	// 设置本地存储SessionStorage
	function setApplySessionStorage() {
	    sessionStorage.setItem("lfq_amt", applyNum);
	    sessionStorage.setItem("lfq_cnt", stageNumber);
	    sessionStorage.setItem("openid", openid);
	    sessionStorage.setItem("sceneId", sceneId);
	    sessionStorage.setItem("merId", merId);
	    sessionStorage.setItem("cardFeeRate", cardFeeRate);
	    sessionStorage.setItem("merName", merName);
	    sessionStorage.setItem("prdt_no", prdt_no);
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	// 获取url参数
	var QueryString = {
	    data: {},
	    Initial: function() {
	        var aPairs, aTmp;
	        var queryString = new String(window.location.search);
	        queryString = queryString.substr(1, queryString.length);
	        aPairs = queryString.split("&");
	        for (var i = 0; i < aPairs.length; i++) {
	            aTmp = aPairs[i].split("=");
	            this.data[aTmp[0]] = aTmp[1];
	        }
	    },
	    GetValue: function(key) {
	        return this.data[key];
	    }
	}


	//移动端检查
	function checkBrowser() {
	    var u = navigator.userAgent.toLowerCase();
	    if (u.indexOf('mobile') == -1 && u.indexOf('iphone') == -1) {
	        window.location.href = "../error_browser.html";
	    }
	}

	function postAjax(url, param, callBack, asyncVal) {
	    var av = asyncVal ? asyncVal : false;
	    $.ajax({
	        type: 'post',
	        dataType: "json",
	        url: url,
	        data: param,
	        cache: false,
	        async: false,
	        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	        success: function(msg) {
	            callBack(msg);
	        },
	        error: function(msg) {
	            callBack(msg);
	        }
	    });
	}

	function getAjax(url, param, callBack) {
	    $.ajax({
	        type: 'get',
	        dataType: "json",
	        url: url,
	        data: param,
	        cache: false,
	        async: false,
	        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	        success: function(msg) {
	            callBack(msg);
	        },
	        error: function(msg) {
	            callBack(msg);
	        }
	    });
	}

	//   不打包形式
	/*
	require.register("../components/winLocation.js", function(module, exports, require) {
	    module.exports = {
	        QueryString: QueryString,
	        checkBrowser: checkBrowser,
	        postAjax: postAjax,
	        getAjax: getAjax
	    }
	});
	*/
	// 打包形式

	module.exports = {
	    QueryString: QueryString,
	    checkBrowser: checkBrowser,
	    postAjax: postAjax,
	    getAjax: getAjax
	}

/***/ },
/* 2 */
/***/ function(module, exports) {

	/**
	 * 提示框 用于替代myDialog.js
	 */
	function hideModal(modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    var theModal = document.getElementById(idName);
	    theModal.style.display = "none";
	}

	function showModals(modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    var theModal = document.getElementById(idName);
	    var bWidth = parseInt(document.documentElement.clientWidth);
	    var bHeight = parseInt(document.documentElement.clientHeight);

	    $(".modal>.back").css({
	        "top": "0px",
	        "left": "0px",
	        "position": "absolute",
	        "background": "#666",
	        "width": "100%",
	        "height": "100%",
	        "opacity": 0.40,
	    });

	    theModal.style.display = "block";

	}

	// 设置提示内容
	function setModalBody(modalBody,modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    $("#"+idName+" .modal-body").html(modalBody);
	}

	function showBodalBody(modalBody,modalId) {
	    var idName = modalId ? modalId : "tishuModal";
	    setModalBody(modalBody);
	    showModals(idName);
	}

	// 初始化
	(function init() {
	    $("#modalButton").parent().on("touchend", function() {
	        hideModal();
	        event.preventDefault();
	    });
	})();


	// 不打包形式  要加载requrie.js
	/*
	require.register("./cmodal.js", function(module, exports, require) {
	    module.exports = {
	        setModalBody: setModalBody,
	        hideModal: hideModal,
	        showModals: showModals,
	        showBodalBody: showBodalBody
	    };
	});
	*/
	// 打包形式

	module.exports = {
	    setModalBody: setModalBody,
	    hideModal: hideModal,
	    showModals: showModals,
	    showBodalBody: showBodalBody
	}

/***/ },
/* 3 */
/***/ function(module, exports) {

	// 清除"数字"和"."以外的字符
	function clearNoNum(obj) {
	    obj.value = parseFloat(obj.value.replace(/[^\d.]/g, "")); //清除"数字"和"."以外的字符
	    obj.value = obj.value.replace(/^\./g, ""); //验证第一个字符是数字而不是
	    obj.value = obj.value.replace(/\.{2,}/g, "."); //只保留第一个. 清除多余的
	    obj.value = obj.value.replace(".", "$#$").replace(/\./g, "").replace("$#$", ".");
	    obj.value = obj.value.replace(/^(\-)*(\d+)\.(\d\d).*$/, '$1$2.$3'); //只能输入两个小数
	}

	// 把输入的大于可输入的最大值时，替换成最大值
	function monreMax(obj, max) {
	    inputValue = obj.value;
	    if (parseFloat(inputValue) > parseFloat(max)) {
	        obj.value = max;
	    }
	}

	// 保留两位小数
	function input2bit(obj) {
	    if (obj.value.search(/\.\d{3,}/) != -1) {
	        clearNoNum(obj);
	    }
	}

	// 禁止数字和.以外的字符输入
	function deleteNoNumber(obj) {
	    var reg = /[^\d.]/;
	    if (reg.test(obj.value) || obj.value == "") {
	        obj.value = obj.value.replace(/[^\d.]/g, "");
	    }
	}

	// 截取两位小数
	function hold2bit(theNum) {
	    var theNum2bit = String(theNum);
	    if(String(theNum).match(/[0-9,]{0,}\.\d\d/)){
	        theNum2bit = String(theNum).match(/[0-9,]{0,}\.\d\d/)[0];
	    }else if(String(theNum).match(/[0-9,]{0,}\.\d/)){
	        theNum2bit += '0';
	    }else if(String(theNum).match(/[0-9,]{0,}\./)){
	        theNum2bit += '00';
	    }else if(String(theNum).match(/[0-9,]{0,}/)){
	        theNum2bit += '.00';
	    }
	    return theNum2bit;
	}



	// 打包形式

	module.exports = {
	    clearNoNum: clearNoNum,
	    monreMax: monreMax,
	    input2bit: input2bit,
	    deleteNoNumber: deleteNoNumber,
	    hold2bit: hold2bit
	}

/***/ }
]);